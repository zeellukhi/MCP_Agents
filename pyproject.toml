# MCP_Agents/pyproject.toml

[build-system]
# Specifies the build backend Python packaging tools should use.
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
# Core project metadata (PEP 621)
name = "mcp-agents"
version = "0.1.0" # Update version as you release changes
description = "An agent platform leveraging MCP for tool usage with LangChain and Google Gemini."
readme = "README.md" # Path to your project's README file
requires-python = ">=3.9" # Minimum Python version required
license = {text = "MIT"} # Or choose another license like "Apache-2.0"

# List your authors
authors = [
  {name = "Your Name", email = "your.email@example.com"},
  # Add other authors if any
]

# Classifiers help users find your project (https://pypi.org/classifiers/)
classifiers = [
    "Development Status :: 3 - Alpha", # Or 4 - Beta, 5 - Production/Stable
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License", # Match license above
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Communications :: Chat",
]

# Dependencies - While requirements.txt is often used for applications,
# listing core dependencies here is also standard practice, especially for libraries.
# Pip can install directly from pyproject.toml.
# Keep this consistent with requirements.txt or choose one primary source.
dependencies = [
    "python-dotenv>=1.0.0",
    "uvicorn[standard]>=0.29.0",
    "starlette>=0.37.0",
    "langchain>=0.1.0,<0.2.0",
    "langchain-google-genai>=1.0.0",
    "langgraph>=0.0.40",
    "langchain-mcp-tools>=0.1.0",
    "langchain-mcp-adapters>=0.1.0", # Verify this name
    "notion-client>=2.0.0",
    "google-api-python-client>=2.80.0",
    "google-auth-oauthlib>=1.0.0",
    "google-auth-httplib2>=0.1.0",
    # Add other dependencies here if desired
]

# Optional dependencies (e.g., for development, testing)
[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.20",
    "httpx>=0.25", # For async testing of API endpoints
    "ruff",      # Linter and formatter
    "black",     # Code formatter
    "mypy",      # Static type checker
    "pre-commit", # For running checks before commits
]

# Project URLs (optional)
[project.urls]
"Homepage" = "https://github.com/yourusername/mcp-agents" # Example URL
"Bug Tracker" = "https://github.com/yourusername/mcp-agents/issues" # Example URL

# --- Tool Configurations (Examples) ---

[tool.black]
# Configuration for the Black code formatter
line-length = 88
target-version = ['py311'] # Match your target Python version

[tool.ruff]
# Configuration for the Ruff linter/formatter
line-length = 88
select = ["E", "W", "F", "I", "UP"] # Select rule codes (E/W=pycodestyle, F=pyflakes, I=isort, UP=pyupgrade)
ignore = [] # Add specific rules to ignore if needed
target-version = "py311" # Match your target Python version

[tool.ruff.format]
# Ruff's formatter options (optional, can replace Black)
quote-style = "double"

[tool.mypy]
# Configuration for the MyPy static type checker
python_version = "3.11" # Match your target Python version
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Often needed for libraries without stubs
# Add --strict flag or other options as desired

[tool.pytest.ini_options]
# Configuration for Pytest
minversion = "7.0"
addopts = "-ra -q --cov=src --cov-report=term-missing" # Example options: verbose reporting, quiet, coverage
testpaths = [
    "tests", # Directory where tests are located
]
python_files = "test_*.py" # Pattern for test files
asyncio_mode = "auto" # Required for testing async code with pytest-asyncio